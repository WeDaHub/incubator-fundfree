{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*!\n * lonts 0.1.2 (https://github.com/dale426/lonts)\n * API https://github.com/dale426/lonts/blob/master/doc/api.md\n * Copyright 2017-2020 dale426. All Rights Reserved\n * Licensed under MIT (https://github.com/dale426/lonts/blob/master/LICENSE)\n */\n\n\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// js四则运算\r\n/**\r\n * 加法，计算js中两个数的和\r\n * @param {Number} arg1 第一个加数\r\n * @param {Number} arg2 第二个加数\r\n * @param {Number} d 保留的小数位数，可以不传\r\n * @returns {Number} 两个数的计算结果\r\n */\r\nfunction add(arg1, arg2, d) {\r\n    var arg1Str = arg1.toString();\r\n    var arg2Str = arg2.toString();\r\n    var arg1Arr = arg1Str.split('.');\r\n    var arg2Arr = arg2Str.split('.');\r\n    // 获取小数位数\r\n    var d1 = arg1Arr.length === 2 ? arg1Arr[1] : '';\r\n    var d2 = arg2Arr.length === 2 ? arg2Arr[1] : '';\r\n    var maxLen = Math.max(d1.length, d2.length);\r\n    var m = Math.pow(10, maxLen);\r\n    // 默认按照最长的小数位计算\r\n    var result = Number(((arg1 * m + arg2 * m) / m).toFixed(maxLen));\r\n    return typeof d === 'number' ? Number(result.toFixed(d)) : result;\r\n}\r\n/**\r\n * 减法\r\n * @param 参数与加法一样\r\n * @returns {number}\r\n */\r\nfunction sub(arg1, arg2) {\r\n    return add(arg1, -arg2, arguments[2]);\r\n}\r\n/**\r\n * 乘法\r\n * @param 参数与加法一致\r\n * @returns {number}\r\n * 计算小数位共多少位， 然后去除小数点进行乘法运算，然后再除以 10 的位数次方\r\n */\r\nfunction mul(arg1, arg2) {\r\n    var arg1Str = arg1.toString();\r\n    var arg2Str = arg2.toString();\r\n    var len1 = arg1Str.split('.')[1] ? arg1Str.split('.')[1].length : 0;\r\n    var len2 = arg2Str.split('.')[1] ? arg2Str.split('.')[1].length : 0;\r\n    var l = len1 + len2;\r\n    var result = Number(arg1Str.replace('.', '')) * Number(arg2Str.replace('.', '')) / Math.pow(10, l);\r\n    var d = arguments[2];\r\n    return typeof d === 'number' ? Number(result.toFixed(d)) : result;\r\n}\r\n/**\r\n * 除法\r\n * @param 参数与加法一致\r\n * @returns {number}\r\n * 计算分母小数点位数 - 分子小数点位数的差 再 乘以10 的位数次方\r\n */\r\nfunction div(arg1, arg2) {\r\n    var arg1Str = arg1.toString();\r\n    var arg2Str = arg2.toString();\r\n    var len1 = arg1Str.split('.')[1] ? arg1Str.split('.')[1].length : 0;\r\n    var len2 = arg2Str.split('.')[1] ? arg2Str.split('.')[1].length : 0;\r\n    var temp = Number(arg1Str.replace('.', '')) / Number(arg2Str.replace('.', ''));\r\n    var result = mul(temp, Math.pow(10, len2 - len1));\r\n    var d = arguments[2];\r\n    return typeof d === 'number' ? Number(result.toFixed(d)) : result;\r\n}\r\nvar calc = { add: add, sub: sub, mul: mul, div: div };\n\n/**\r\n * 时间格式化\r\n *\r\n * @param {*} date 时间对象Date\r\n * @param {*} fmt\r\n * @returns\r\n */\r\nfunction fmtDate(date, fmt) {\r\n    date = date || new Date();\r\n    fmt = fmt || 'yyyy-MM-dd hh:mm:ss';\r\n    var ob = {\r\n        'M+': date.getMonth() + 1,\r\n        'd+': date.getDate(),\r\n        'h+': date.getHours(),\r\n        'm+': date.getMinutes(),\r\n        's+': date.getSeconds(),\r\n        'q+': Math.floor((date.getMonth() + 3) / 3),\r\n        'S': date.getMilliseconds() //毫秒\r\n    };\r\n    if (/(y+)/.test(fmt)) {\r\n        fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));\r\n    }\r\n    for (var k in ob) {\r\n        if (new RegExp('(' + k + ')').test(fmt)) {\r\n            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (ob[k]) : (('00' + ob[k]).substr(('' + ob[k]).length)));\r\n        }\r\n    }\r\n    return fmt;\r\n}\r\n/**\r\n *  金钱千分位\r\n *\r\n * @param {((number|string))} val 需要转换的数字\r\n * @param {*} num 千分位 默认3个一位\r\n */\r\nfunction fmtMoney(val, num) {\r\n    if (num === void 0) { num = 3; }\r\n    var reg = new RegExp('\\\\B(?=(?:\\\\d{' + num + '})+(?!\\\\d))', 'g');\r\n    return String(val).replace(reg, ',');\r\n}\n\n/**\r\n * 身份证、手机号脱敏处理\r\n *\r\n * @param {string|number} [target=''] 目标字符串\r\n * @param {number} [start=4] 开始位置\r\n * @param {number} [end=3] 结束位置\r\n * @returns {string}\r\n */\r\nfunction encrypt(target, start, end) {\r\n    if (target === void 0) { target = ''; }\r\n    if (start === void 0) { start = 3; }\r\n    if (end === void 0) { end = 4; }\r\n    var reg = new RegExp(\"^(\\\\d{\" + start + \"})\\\\d+(\\\\w{\" + end + \"})$\", 'i');\r\n    var middle = String(target).slice(start, -end).replace(/\\w/g, '*');\r\n    return String(target).replace(reg, \"$1\" + middle + \"$2\");\r\n}\n\nvar index = { calc: calc, fmtDate: fmtDate, fmtMoney: fmtMoney, encrypt: encrypt };\n\nexports.calc = calc;\nexports.fmtDate = fmtDate;\nexports.fmtMoney = fmtMoney;\nexports.encrypt = encrypt;\nexports.default = index;\n"]}